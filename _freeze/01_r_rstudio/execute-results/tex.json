{
  "hash": "006e4618e53149d20ccb1b5c966f6cad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R e RStudio\"\nauthor:\n  - name: Paulo Barros\n    orcid: 0000-0001-9839-0796\n    email: pbarrosbio@gmail.com\n    affiliations:\n      - name: PPZ - UESB - GACOM\n---\n\n\n\n\n\n\n## Instalação\n\nO {{< fa brands r-project >}} é um ambiente de software para computação estatística, distribuído como software livre e gratuito, está disponível para diversas plataformas como Windows, MacOS e Linux.\n\nO **RStudio** é um ambiente de desenvolvimento integrado (IDE) desenvolvida pela Posit criado para facilitar a programação em R oferecendo diversos recursos para o usuário. \n\nÉ necessário que ambos estejam instalados em sua máquina, você pode realizar o download do R no site do [{{< fa link >}} CRAN](https://cran.r-project.org/){target=\"_blank\"}\n e o RStudio no site da [{{< fa link >}} POSIT](https://posit.co/download/rstudio-desktop/){target=\"_blank\"}.\n\n\n\n## Interface do RStudio\n\nO Rstudio é composto de quatro janelas principais:\n\n![Crédito: Sophie Lee](images/rstudio_ide.png)\n\n{{< fa a >}} **: Editor (_Source_)**\n\nO editor é o local onde escrevemos e organizamos os nossos códigos (_scripts_) em R para serem executados. Isso permite que seja possível organizar nosso fluxo de trabalho nas análises e termos em mão os códigos sempre que necessário para rodar novamente os comandos, atualizar o nosso código e compartilhar o trabalho com parceiros.\n\nPara criar um novo arquivo de script acesse o menu em _File > New File > R Script_ ou clique no ![](images/new_file_shortcut.png). Isso criará um novo arquivo em branco no qual você pode editar o seu código em R. Você pode editar múltiplos arquivos simultaneamente.\n\nOs códigos no script precisam ser executados explicitamente, eles não rodam de maneira automática. Para rodar os comandos você pode pressionar simultaneamente `CTRL + Enter` no Windows/Linux ou `COMANDO + Enter` no MacOS. Você também pode selecionar o código que deseja executar e pressionar o botão ![](images/run_shortcut.png) no canto superior direito do editor de scripts. \n\nVocê pode executar a linha atual posicionando o cursor em qualquer ponto da linha, ou selecionando uma parte específica do código que deseja executar. É possível executar multiplos comandos em sequência selecionando os respectivos trechos desejados no código.\n\nVocê vai perceber que todo código é executado no _Console_, e a grande vantagem do arquivo de script é ter um registro do fluxo de códigos, já que o console armazenda os comandos mas só nos permite executar o último comando executado por vez.\n\nPara salvar o seu arquivo de código você pode acessar o menu _File > Save as..._ ou clicar no ![](images/save_shortcut.png) no topo da janela. Uma vez que o arquivo tenha sido salvo uma primeira vez e nomeado, você pode utilizar o atalho `CTRL + s` para salvar o arquivo. \n\n::: {.callout-note}\n## Dica de estilo\n\nNomes de arquivos devem ser significativos, escritos em minúsculo e terminados em `.R` se um arquivo de script, `.Rmd` se de `Rmarkdown` ou `.qmd` se `Quarto`.\n\nEvite utilizar caracteres especiais (acentos, virgulas, pontos...) e espaços, use `_` ao inves disso. Se os arquivos precisam ser executados em uma ordem específica, enumere-os sequencialmente.\n\n`01-primeiro_script.R`, `02-segundo_script.R` ...\n\n:::\n\nVocê pode abrir arquivos salvos previamente indo no menu _File > Open File..._ e selecionando o(s) arquivo(s) que deseja, ou no ícone ![](images/open_shortcut.png). No teclado, pode usar `CTRL + o`.\n\n{{< fa b >}} **: Console**\n\nO Console é onde todos os comandos em R são executados e os resultados exibidos, com exceção dos gráficos. Você vai notar o símbolo `>`, os comandos podem ser inseridos diretamente no console e executados pressionando `Enter`. Mas escrever código diretamente no console não é lá muito prático. \n\nA cada vez que uma sessão do R é inicializada, no Console são exibidas informações como a versão do R sendo utilizada. Para limpar o console voce pode usar o atalho `CTRL + l`. Lembre-se que ao limpar o console os resultados exibidos nele também são perdidos.\n\n{{< fa c >}} **: Environment and history**\n\nNa aba _Environment_ você encontrará todos os objetos criados durante a execução dos códigos. Variáveis criadas, dados importados, tudo isso é exibido em um formato de lista nesta aba. Na aba _history_ consta o histórico de comandos executados na sessão atual do R.\n\n{{< fa d >}} **:Files, plots, packages and help**\n\nNeste conjunto de abas fica o explorador de arquivos, são exibidos os gráficos que criamos (plots), a lista de pacotes disponíveis e também são exibidos os arquivos de ajuda do R.\n\nEstas janelas (A,B,C,D) podem ser configuradas ao gosto do usuário, para isso você pode acessar o menu _View > Pane > Pane Layout_ e configurar seu ambiente de trabalho da forma que achar melhor.\n\n\n## {{< fa laptop-code >}} Vamos praticar?\n\n1. Crie um novo arquivo de script no editor.\n2. Salve o seu arquivo em um local apropriado.\n\n\n## A sintaxe do R\n\nO R assim como qualquer linguagem de programação segue uma **sintaxe**[^1]. Importante lembrar que o R é **_case sensitive_**, ou seja, a linguagem faz diferenciação entre caracteres maiúsculos e minúsculos. Isso é essencial na hora de invocar funções e objetos.\n\nSeu script deve sempre fazer sentido pra você para qualquer um que vá ler o seu código, pra isso utilizamos algumas convenções na hora de escrever código em R. Você pode utilizar o `#` para incluir comentários no seu código. Comentários são trechos de texto que não são interpretados como comandos no R e ajudam a organizar e até mesmo a explicar partes do código no script.\n\nCombinando `#` com `-` você pode criar seções dentro do script, gerando automaticamente um menu de navegação que facilita a movimentação em um script longo. Você pode ver este menu clicando no botão ![](images/outline.png) no canto superior direito do seu script.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Carregando dados ----\n\n# Editando os dados ----\n```\n:::\n\n\n\n\n\n\nQuando escrever o seu código evite linhas muito longas, quebre o código em múltiplas linhas pra torná-lo mais legível e permitir assim o uso inclusive de comentários no meio do fluxo de código.\n\n\n\n[^1]: Sintaxe, em linguagem de programação, refere-se ao conjunto de regras e estruturas que definem a forma correta de escrever código em uma linguagem específica. Assim como a gramática em uma língua natural, a sintaxe determina como os comandos, instruções e expressões devem ser organizados e escritos para que o código seja compreendido e executado corretamente pelo compilador ou interpretador da linguagem.\n\n## Objetos e Funções\n\n\n### Objetos\n\nTudo em R é um objeto. Objetos podem ser de várias classes como vetores, listas, matrizes, gráficos e inclusive conjuntos de dados completos. \n\nOs nomes dos objetos em R são bem flexíveis, entretanto como comentado anteriormente, R é _case sensitive_ e faz dinstinção entre letras maíusculas e minúsculas. Nomes de objetos em R podem conter letras, números (desde que não no início do nome), e caracteres especiais como `_` e `.`. \n\nPara definirmos um objeto em R podemos utilizar `<-` ou `=`, estes são os operadores de atribuição. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1:3)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nb = \"Eu sou um objeto em R!\"\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Eu sou um objeto em R!\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nSe você observar a aba _Environment_ que já discutimos antes, verá que os objetos que criamos aparecem nesta aba.  E no código acima para exibir o valor contido no objeto, basta chamar o nome do objeto como fizemos e executar a linha. \n\n### Funções\n\nUma Função em linguagem de programação nada mais é do que um conjunto de operações que recebe **argumentos** e exibe um resultado. Funções requerem que os argumentos sejam informados entre `()`. Vamos tentar ilustrar de maneira mais fácil. Imagine uma Cafeteira como uma função. Para fazer Café (nosso **resultado**), precisamos fornecer a cafeteira água e pó (**argumentos**). A cafeteira então esquenta a água, despeja sobre o pó e coa (**operações**). E no final obtemos o nosso {{< fa mug-hot >}}!!\n\n## Pacotes\n\n### Instalando Pacotes {#sec-inst-pkg}\n\nQuando temos um conjunto grande de funções, podemos combiná-las em um Pacote R. O R é composto de inúmeros pacotes que desempenham as mais diversas funções. A instalação básica do R já conta com muitos pacotes disponíveis, e podemos instalar pacotes adicionais sempre que necessário utilizando pacotes oficiais no repositório do [{{< fa link >}} CRAN](https://cran.r-project.org/){target=\"_blank\"} ou disponíveis em repositórios no GitHub. \n\nPara instalar um ou mais pacotes no R podemos utilizar o comando `install.packages`. Ou você também pode instalar os pacotes na aba _Packages_ clicando em ![](images/inst_packages.png) e procurando na barra pelo nome do pacote. Para instalar mais de um pacote de uma vez basta separar o nome dos pacotes com `,`.\n\nEste material utiliza o pacote `tidyverse` que provavelmente se você instalou o R pela primeira vez pode ser que ainda não o tenha no seu computador, vamos instalar agora então? Basta rodar o código abaixo! Pode demorar alguns minutos a depender da sua configuração de computador e internet, tenha paciência jovem padawan!\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n\n\n\n### Carregando pacotes\n\nSó precisamos instalar os pacotes uma única vez. Os pacotes no R recebem atualizações constantes, então muitas vezes você será perguntado se quer atualizar os seus pacotes.\n\nUma vez instalados, para ter acesso as funções em um pacote precisamos carregar ele na nossa sessão no R. Para isso usamos o comando `library`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.4     v readr     2.1.5\nv forcats   1.0.0     v stringr   1.5.1\nv ggplot2   3.5.1     v tibble    3.2.1\nv lubridate 1.9.3     v tidyr     1.3.1\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### Mensagens de Aviso e Erro \n\nA maioria dos pacotes em R exibem mensagens de inicialização/carregamento. **É muito importante se familiarizar com estas mensagens!** No momento do carregamento o R avisa sobre erros no processo de inicialização, ou emite alertas importantes sobre conflitos em funções no pacote. Acostume-se a sempre checar as mensagens de inicialização para ter certeza que o pacote foi iniciado corretamente.\n\n\n## Ajuda do R\n\nTodo pacote do R vem acompanhado de sua **documentação**. A documentação é o primeiro lugar no qual você deve procurar ajuda para qualquer dúvida que lhe ocorrer. Muitos problemas para quem está começando a trabalhar com a linguagem vem justamente ao ignorar a documentação das funções e o arquivo de ajuda. Eles servem para te mostrar como a função funciona, quais seus argumentos e formatos de entrada e qual as saídas esperadas.\n\nAlém disso, muitos pacotes oferecem também um vasto conteúdo teórico a respeito das análises que realizam. Isso também auxilia a compreender o que está acontecendo ao utilizar determinada função. **LEIAM A DOCUMENTAÇÃO SEMPRE!!!**\n\nPara utilizar a ajuda do R você pode ir na aba _Help_ e procurar pelos termos de interesse, ou pode utilizar a função `help()` dentro do código. Também é possível acessar a documentação de uma função específica colocando uma `?` antes da chamada da função. Colocando `??` antes de uma palavra faz uma busca em toda a documentação pelo termo informado. Execute os códigos abaixo.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ajuda sobre a função soma sum()\n\nhelp(sum)\n\n# Mesma coisa de maneira diferente\n\n?sum\n\n# Busca pelo termo `sum`\n\n??sum\n```\n:::\n",
    "supporting": [
      "01_r_rstudio_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}